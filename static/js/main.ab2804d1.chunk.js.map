{"version":3,"sources":["Components/Section/Section.jsx","Components/Statistics/Statistics.jsx","Components/FeedbackOptions/FeedbackOptions.jsx","Components/Notification/Notification.jsx","App.js","index.js"],"names":["Section","title","children","Statistics","good","neutral","bad","total","positivePercentage","onLeaveFeedback","options","map","option","type","onClick","Notification","message","App","state","label","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","totalFeedback","feedbackPercentage","leaveFeedback","FeedbackOptions","Component","ReactDOM","render","StrictMode","className","css","document","getElementById"],"mappings":"kPAeeA,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,6BAAKD,IACJC,MC0BUC,EA7BI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,8BACE,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,UAId,8BACE,+BACE,yCAAYC,KACZ,qDAAwBC,EAAxB,gBCLKC,EATS,gBAAGC,EAAH,EAAGA,QAASD,EAAZ,EAAYA,gBAAZ,OACpBC,EAAQC,KAAI,SAAAC,GAAM,OAAK,wBAAqBC,KAAK,SAASC,QAAS,kBAAML,EAAgBG,IAAlE,SAA4EA,GAA/DA,OCKzBG,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAkB,6BAAKA,KCyD7BC,E,4MApDbC,MAAQ,CACNd,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPG,gBAAkB,SAACU,GAAD,OAAW,EAAKC,UAAS,SAAAC,GAAS,sBAAQF,EAAQE,EAAUF,GAAS,O,EAGvFG,mBAAqB,WAAO,IAAD,EACI,EAAKJ,MAElC,OAHyB,EAClBd,KADkB,EACZC,QADY,EACHC,K,EAIxBiB,gCAAkC,WAAO,IAChCnB,EAAQ,EAAKc,MAAbd,KAEP,OADsBoB,KAAKC,MAAc,IAAPrB,EAAe,EAAKkB,uB,4CAMxD,WAAU,IAAD,EACsBI,KAAKR,MAA3Bd,EADA,EACAA,KAAMC,EADN,EACMA,QAASC,EADf,EACeA,IAChBqB,EAAgBD,KAAKJ,qBACrBM,EAAqBF,KAAKH,kCAC1BM,EAAgBH,KAAKjB,gBAC3B,OACE,gCACE,cAAC,EAAD,CAASR,MAAM,wBAAf,SACE,cAAC6B,EAAD,CACEpB,QAAS,CAAC,OAAQ,UAAW,OAC7BD,gBAAiBoB,MAIrB,cAAC,EAAD,CAAS5B,MAAM,aAAf,SACG0B,EAAgB,EAChB,cAAC,EAAD,CACCvB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOoB,EACPnB,mBAAoBoB,IAErB,cAAC,EAAD,CAAcZ,QAAQ,+B,GA9Cfe,aCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAKC,UAAWC,QAElBC,SAASC,eAAe,U","file":"static/js/main.ab2804d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section>\r\n    <h2>{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <ul>\r\n          <li>Good: {good}</li>\r\n          <li>Neutral: {neutral}</li>\r\n          <li>Bad: {bad}</li>\r\n        </ul>\r\n      </div>\r\n    \r\n      <div>\r\n        <ul>\r\n          <li>Total: {total}</li>\r\n          <li>Positive feedback: {positivePercentage}%</li>\r\n        </ul>\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good:PropTypes.number.isRequired,\r\n  neutral:PropTypes.number.isRequired,\r\n  bad:PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage:PropTypes.number.isRequired\r\n};\r\n\r\nexport default Statistics","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst onLeaveFeedback = ({ options, onLeaveFeedback }) => (\r\n    options.map(option => (<button key={option} type=\"button\" onClick={() => onLeaveFeedback(option)}>{option}</button>))\r\n);\r\n\r\nonLeaveFeedback.propTypes = {\r\n    options: PropTypes.array.isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default onLeaveFeedback;\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => (<h3>{message}</h3>);\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Notification;","import React, { Component } from 'react';\nimport Section from './Components/Section'\nimport Statistics from './Components/Statistics'\nimport FeedbackOptions from './Components/FeedbackOptions';\nimport Notification from './Components/Notification'\n\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  }\n\n  onLeaveFeedback = (label) => this.setState(prevState => ({ [label]: prevState[label] + 1 })); \n\n\n  countTotalFeedback = () => {\n    const {good, neutral, bad} = this.state;\n    const countTotal = good + neutral + bad;\n    return countTotal;\n  };\n  countPositiveFeedbackPercentage = () => {\n    const {good} = this.state;\n    const countPositive = Math.round((good * 100) / (this.countTotalFeedback()));\n    return ( countPositive\n      /* countPositive === NaN ? 0 : countPositive */\n    );\n  };\n  \n  render() {\n    const {good, neutral, bad} = this.state;\n    const totalFeedback = this.countTotalFeedback();\n    const feedbackPercentage = this.countPositiveFeedbackPercentage();\n    const leaveFeedback = this.onLeaveFeedback;\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            onLeaveFeedback={leaveFeedback}>\n          </FeedbackOptions>\n        </Section>\n\n        <Section title=\"Statistics\">\n          {totalFeedback > 0 ?\n          (<Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={totalFeedback}\n            positivePercentage={feedbackPercentage}>\n          </Statistics>) : \n          (<Notification message=\"No feedback given\"/>)}\n        </Section>\n      </div>   \n    )\n  }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport css from  './index.module.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App className={css}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}